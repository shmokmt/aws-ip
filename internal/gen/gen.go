package gen

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"net/http"

	awsip "github.com/shmokmt/aws-ip"
)

type response struct {
	Ranges []*awsip.IPRange `json:"prefixes"`
}

func Run(ctx context.Context) error {
	const u = "https://ip-ranges.amazonaws.com/ip-ranges.json"
	req, err := http.NewRequest("GET", u, nil)
	if err != nil {
		return err
	}
	req.Header.Set("User-Agent", "https://github.com/shmokmt/aws-ip")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return err
	}

	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}
	var res response
	err = json.Unmarshal(b, &res)
	if err != nil {
		return err
	}
	var buf bytes.Buffer
	buf.WriteString(`// Code generated by internal/gen/gen.go; DO NOT EDIT.`)
	buf.WriteString("\npackage aws_ip")
	buf.WriteString("\nvar ipRanges = &IPRanges{")
	for _, r := range res.Ranges {
		buf.WriteString("\n&IPRange{")
		buf.WriteString(fmt.Sprintf("\nIPPrefix: \"%s\",", r.IPPrefix))
		buf.WriteString(fmt.Sprintf("\nRegion: \"%s\",", r.Region))
		buf.WriteString(fmt.Sprintf("\nService: \"%s\",", r.Service))
		buf.WriteString(fmt.Sprintf("\nNetworkBorderGroup: \"%s\",", r.NetworkBorderGroup))
		buf.WriteString("\n},")
	}
	buf.WriteString("\n}")
	formated, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	if err := ioutil.WriteFile("resource.go", formated, 0644); err != nil {
		return err
	}
	return nil
}
